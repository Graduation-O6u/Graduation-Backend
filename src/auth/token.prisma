model User {
    id         String      @id @default(uuid())
    token      Token[]
    secret     secret?
    baseUser   following[] @relation(name: "user")
    userFollow following[] @relation(name: "userFollow")
}

model following {
    id       String @id @default(uuid())
    User     User   @relation(name: "user", fields: [userId], references: [id])
    userId   String
    friend   User   @relation(name: "userFollow", fields: [friendId], references: [id])
    friendId String
}

enum TokenType {
    RefreshToken
    AccessToken
}

model Token {
    id           String    @id @default(uuid())
    userId       String
    type         TokenType
    refreshId    String?   @unique
    refreshToken Token?    @relation("AccesHasRefresh", fields: [refreshId], references: [id])
    updatedAt    DateTime  @default(now()) @updatedAt
    accessToken  Token?    @relation("AccesHasRefresh")
    createdAt    DateTime  @default(now())
    User         User      @relation(fields: [userId], references: [id])
}

model secret {
    id     String     @id @default(uuid())
    userId String     @unique
    token  String
    type   secretType @default(PASSWORD_RESET)
    user   User       @relation(fields: [userId], references: [id])
}

enum secretType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}
