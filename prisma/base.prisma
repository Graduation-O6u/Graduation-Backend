datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id              String       @id @default(uuid())
    email           String
    emailVerified   Boolean      @default(false)
    name            String
    image           String       @default("https://res.cloudinary.com/lms07/image/upload/v1645954589/avatar/6214b94ad832b0549b436264_avatar1645954588291.png")
    backgroundImage String       @default("https://www.solidbackgrounds.com/images/1920x1080/1920x1080-gray-solid-color-background.jpg")
    password        String?
    role            Role         @default(USER)
    createdAt       DateTime     @default(now())
    cityId          String
    jobId           String
    aboutme         String       @db.Text
    job             jobTitle     @relation(name: "JobsToUser", fields: [jobId], references: [id])
    secret          secret?
    cv              String       @default("")
    baseUser        following[]  @relation(name: "user")
    userFollow      following[]  @relation(name: "userFollow")
    Token           Token[]
    userSkills      userSkills[]
    userJobs        userJobs[]
    applayJobs      applayJobs[]
}

model jobTitle {
    id    String @id @default(uuid())
    title String
    user  User[] @relation(name: "JobsToUser")
    jobs  jobs[]
}

model jobs {
    id                String          @id @default(uuid())
    jobTitle          jobTitle        @relation(fields: [jobTitleId], references: [id])
    jobType           jobType
    jobLocationType   jobLocationType
    salary            String
    salaryPer         salaryPer
    location          companyLocation @relation(fields: [companyLocationId], references: [id])
    companyLocationId String
    company           company         @relation(fields: [companyId], references: [id])
    companyId         String
    jobSkills         jobSkills[]
    jobTitleId        String
    createdAt         DateTime        @default(now())
    userJobs          userJobs[]
    jobDescription    String          @db.Text
    applayJobs        applayJobs[]
}

model applayJobs {
    id     String  @id @default(uuid())
    jobs   jobs    @relation(fields: [jobsId], references: [id])
    jobsId String
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model userJobs {
    id String @id @default(uuid())

    jobs   jobs   @relation(fields: [jobsId], references: [id])
    jobsId String
    User   User   @relation(fields: [userId], references: [id])
    userId String
}

model jobSkills {
    id       String @id @default(uuid())
    job      jobs   @relation(fields: [jobsId], references: [id])
    jobsId   String
    skill    skills @relation(fields: [skillsId], references: [id])
    skillsId String
}

model Token {
    id           String    @id @default(uuid())
    userId       String
    type         TokenType
    refreshId    String?   @unique
    refreshToken Token?    @relation("AccesHasRefresh", fields: [refreshId], references: [id])
    updatedAt    DateTime  @default(now()) @updatedAt
    accessToken  Token?    @relation("AccesHasRefresh")
    createdAt    DateTime  @default(now())
    valid        Boolean   @default(true)
    user         User      @relation(fields: [userId], references: [id])
}

model secret {
    userId    String     @unique
    url       String     @id
    code      String
    type      secretType @default(EMAIL_VERIFICATION)
    user      User       @relation(fields: [userId], references: [id])
    createdAt DateTime   @default(now())
}

model skills {
    id         String       @id @default(uuid())
    skill      String
    userSkills userSkills[]
    jobSkills  jobSkills[]
}

model userSkills {
    id      String @id @default(uuid())
    userId  String
    skillId String

    user   User   @relation(fields: [userId], references: [id])
    skills skills @relation(fields: [skillId], references: [id])
}

model following {
    id        String   @id @default(uuid())
    User      User     @relation(name: "user", fields: [userId], references: [id])
    userId    String
    friend    User?    @relation(name: "userFollow", fields: [friendId], references: [id])
    friendId  String?
    company   company? @relation(fields: [companyId], references: [id])
    companyId String?
}

model company {
    id              String            @id @default(uuid())
    name            String
    subTitle        String
    about           String            @db.Text
    marktingValue   String
    locations       companyLocation[]
    following       following[]
    image           String
    backgroundImage String
    jobs            jobs[]
    url             String
    history         String
}

model companyLocation {
    id        String  @id @default(uuid())
    code      String  @db.TinyText
    company   company @relation(fields: [companyId], references: [id])
    companyId String
    url       String  @db.Text
    name      String
    jobs      jobs[]
}

enum Role {
    USER
    COMPANY
    ADMIN
}

enum TokenType {
    RefreshToken
    AccessToken
}

enum secretType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

enum jobLocationType {
    On_Site
    Hybrid
    Remote
}

enum jobType {
    Part_Time
    Full_Time
    Internship
}

enum salaryPer {
    Month
    Year
    Day
    Hour
}
