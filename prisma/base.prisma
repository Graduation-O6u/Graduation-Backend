datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String            @id @default(uuid())
    email               String
    emailVerified       Boolean           @default(false)
    name                String
    image               String            @default("https://googleflutter.com/sample_image.jpg")
    backgroundImage     String            @default("https://www.solidbackgrounds.com/images/1920x1080/1920x1080-gray-solid-color-background.jpg")
    password            String?
    role                Role              @default(USER)
    createdAt           DateTime          @default(now())
    cityId              String?
    jobId               String
    aboutme             String            @db.Text
    job                 jobTitle          @relation(name: "JobsToUser", fields: [jobId], references: [id])
    secret              secret?
    cv                  String            @default("")
    github              String            @default("")
    behance             String            @default("")
    Token               Token[]
    userSkills          userSkills[]
    userJobs            userJobs[]
    applayJobs          applayJobs[]
    user                views[]           @relation(name: "user")
    view                views[]           @relation(name: "view")
    companyDetails      companyDetails?
    jobs                jobs[]
    companyLocation     companyLocation[]
    usermeetings        meetings[]        @relation(name: "user")
    companymeetings     meetings[]        @relation(name: "company")
    usernotification    notification[]    @relation(name: "user")
    companynotification notification[]    @relation(name: "company")
    provider            provider?
}

model provider {
    id       String  @id @default(uuid())
    user     User?   @relation(fields: [userId], references: [id])
    userId   String? @unique
    google   Boolean @default(false)
    facebook Boolean @default(false)
}

model companyDetails {
    company        User   @relation(fields: [companyId], references: [id])
    companyId      String @unique
    history        String
    marketingValue String
    websiteUrl     String
}

model views {
    userId String
    viewId String
    User   User   @relation(name: "user", fields: [userId], references: [id])
    view   User   @relation(name: "view", fields: [viewId], references: [id])

    @@id([userId, viewId])
}

model jobTitle {
    id    String @id @default(uuid())
    title String
    user  User[] @relation(name: "JobsToUser")
    jobs  jobs[]
}

model jobs {
    id                String          @id @default(uuid())
    jobTitle          jobTitle        @relation(fields: [jobTitleId], references: [id])
    jobType           jobType
    jobLocationType   jobLocationType
    salary            Int
    salaryPer         salaryPer
    location          companyLocation @relation(fields: [companyLocationId], references: [id])
    companyLocationId String
    company           User            @relation(fields: [companyId], references: [id])
    companyId         String
    jobSkills         jobSkills[]
    jobTitleId        String
    createdAt         DateTime        @default(now())
    userJobs          userJobs[]
    jobDescription    String          @db.Text
    applayJobs        applayJobs[]
    meetings          meetings[]
}

model applayJobs {
    id     String  @id @default(uuid())
    jobs   jobs    @relation(fields: [jobsId], references: [id])
    jobsId String
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model meetings {
    id String @id @default(uuid())

    User   User   @relation(name: "user", fields: [userId], references: [id])
    userId String

    company     User          @relation(name: "company", fields: [companyId], references: [id])
    companyId   String
    date        DateTime
    time        String
    jobs        jobs          @relation(fields: [jobsId], references: [id])
    jobsId      String
    description String?       @db.LongText
    status      meetingStatus @default(Pending)
}

model userJobs {
    id String @id @default(uuid())

    jobs   jobs   @relation(fields: [jobsId], references: [id])
    jobsId String
    User   User   @relation(fields: [userId], references: [id])
    userId String
}

model jobSkills {
    id      String @id @default(uuid())
    job     jobs   @relation(fields: [jobId], references: [id])
    jobId   String
    skill   skills @relation(fields: [skillId], references: [id])
    skillId String
}

model Token {
    id           String    @id @default(uuid())
    userId       String
    type         TokenType
    refreshId    String?   @unique
    refreshToken Token?    @relation("AccesHasRefresh", fields: [refreshId], references: [id])
    updatedAt    DateTime  @default(now()) @updatedAt
    accessToken  Token?    @relation("AccesHasRefresh")
    createdAt    DateTime  @default(now())
    valid        Boolean   @default(true)
    user         User      @relation(fields: [userId], references: [id])
}

model secret {
    userId    String     @unique
    url       String     @id
    code      String
    type      secretType @default(EMAIL_VERIFICATION)
    user      User       @relation(fields: [userId], references: [id])
    createdAt DateTime   @default(now())
}

model skills {
    id         String       @id @default(uuid())
    skill      String
    userSkills userSkills[]
    jobSkills  jobSkills[]
}

model userSkills {
    id      String @id @default(uuid())
    userId  String
    skillId String

    user   User   @relation(fields: [userId], references: [id])
    skills skills @relation(fields: [skillId], references: [id])
}

model companyLocation {
    id        String @id @default(uuid())
    code      String @db.TinyText
    company   User   @relation(fields: [companyId], references: [id])
    companyId String
    name      String
    jobs      jobs[]
}

model notification {
    id          String   @id @default(uuid())
    description String   @db.LongText
    createdAt   DateTime @default(now())

    user   User   @relation(name: "user", fields: [userId], references: [id])
    userId String

    company   User    @relation(name: "company", fields: [companyId], references: [id])
    companyId String
    read      Boolean @default(false)
}

enum Role {
    USER
    COMPANY
    ADMIN
}

enum TokenType {
    RefreshToken
    AccessToken
}

enum secretType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

enum jobLocationType {
    On_Site
    Hybrid
    Remote
}

enum jobType {
    Part_Time
    Full_Time
    Internship
}

enum salaryPer {
    Month
    Year
    Day
    Hour
}

enum meetingStatus {
    Pending
    Accepted
    Rejected
    Late
    Done
}
